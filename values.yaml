ctfd:
  image:
    # -- repository link to the CTFd docker image
    repository: ghcr.io/ctfd/ctfd
    # -- image pull policy. One of Always, Never, IfNotPresent
    pullPolicy: IfNotPresent
    # -- Overrides the image tag (version)
    # @default -- `appVersion`
    tag: ""
  # -- Image pull secrets (use this for private repos)
  imagePullSecrets: []

  # -- CTFd replica count (If autoscaling is enabled, this value is ignored)
  replicaCount: 2
  # custom scaling metrics should be considered like the Req/sec and # of sessions, etc.
  autoscaling:
    # -- Enables HPA autoscaling
    enabled: true
    # -- Autoscaling min replicas
    minReplicas: 2
    # -- Autoscaling max replicas
    maxReplicas: 10
    # -- Autoscaling target CPU utilization percentage
    targetCPUUtilizationPercentage: 80
    # -- Autoscaling target memory utilization percentage
    targetMemoryUtilizationPercentage: 80
  resources:
    # -- CTFd pod CPU limit
    limits:
      # -- CTFd pod CPU limit
      cpu: "2"
      # -- CTFd pod memory limit
      memory: 2Gi
    requests:
      # -- CTFd pod CPU request
      cpu: "1"
      # -- CTFd pod memory request
      memory: 1Gi

  # Default env variables (non exhaustive). Refer to CTFd documentation for more
  # No need to set SECRET_KEY, its generated automatically
  # @ignored
  env:
    - name: WORKERS
      value: "2"  # let HPA handle autoscaling instead of increasing workers inside the same pod
    - name: ACCESS_LOG
      value: "-"
    - name: ERROR_LOG
      value: "-"
    - name: REVERSE_PROXY
      value: "true"
    - name: LOG_FOLDER
      value: "/var/log/CTFd"
    - name: UPLOAD_PROVIDER
      value: "s3"  # The chart only supports S3

  uploadprovider:
    s3:
      # -- AWS S3 bucket name
      bucket: ""  # external bucket (you should disable SeaweedFS. See below)
      # -- AWS S3 bucket region
      endpoint_url: ""
      # -- AWS S3 bucket access key
      secret_access_key: ""
      # -- AWS S3 bucket secret key id
      access_key_id: ""

  ingress:
    # -- Enables ingress
    enabled: false
    # -- Ingress class
    className: ""
    # -- Ingress annotations
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    # @ignored
    hosts:
      - host: ctfd.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    # @ignored
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  updateStrategy:
    # -- CTFd update strategy rolling update max surge (extra pods during rolling update)
    maxSurge: 2
    # -- CTFd update strategy rolling update max unavailable pods count
    maxUnavailable: 25%

  pdb:
    # -- Deploy a [PodDisruptionBudget] for the application controller
    enabled: true
    # -- Number of pods that are available after eviction as number or percentage (eg.: 50%)
    # @default -- `""` (defaults to 0 if not specified)
    minAvailable: ""
    # -- Number of pods that are unavailable after eviction as number or percentage (eg.: 50%).
    ## Has higher precedence over `controller.pdb.minAvailable`
    maxUnavailable: "50%"

  # @ignored
  service:
    type: ClusterIP
    port: 8000

  # CTFd security context
  # @default -- Check `values.yaml`. Runs as CTFd user
  securityContext:
    runAsNonRoot: true
    runAsUser: 1001

  # -- CTFd readiness probe
  # @default -- Check `values.yaml`
  livenessProbe:
    httpGet:
      path: /healthcheck
      port: http
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5

  # -- CTFd readiness probe
  # @default -- Check `values.yaml`
  readinessProbe:
    httpGet:
      path: /healthcheck
      port: http
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5

  initContainers: []

  # -- Chart name override
  nameOverride: ""
  # -- Chart fullname override
  fullnameOverride: ""

  # -- CTFd node selector
  nodeSelector: {}

  # -- CTFd tolerations
  tolerations: []

  # -- CTFd affinity
  affinity: {}

  # -- CTFd pod annotations
  podAnnotations: {}

  # -- CTFd pod labels
  podLabels: {}

  # -- CTFd pod security context
  podSecurityContext: {}

  # -- CTFd volumes
  volumes: []

  # --  CTFd volumeMounts
  volumeMounts: []

  serviceAccount:
    # Specifies whether a service account should be created
    # -- creates a CTFd service account
    create: true
    # Automatically mount a ServiceAccount's API credentials?
    # -- CTFd service account mount API credentials
    automount: true
    # Annotations to add to the service account
    # -- CTFd service account annotations
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    # -- CTFd service account name
    name: ""

# Override the mariadb subchart values
mariadb:
  # -- Deploys bitnami's mariadb (set to false if you want to use an external database)
  enabled: true
  # -- MariaDB Architecture (`standalone`, `replication`)
  architecture: standalone
  auth:
    rootPassword: ctfd
    username: ctfd
    password: ctfd
    database: ctfd
  # -- External database connection details. Takes effect if `mariadb.enabled` is set to false
  # @default -- ignored
  external:
    port: 3306
    host: external-mariadb-host
    username: ""
    password: ""
    database: ""
  volumePermissions:
    enabled: true  # set to false if you want to manage the permissions yourself
  primary:
    # -- MariaDB primary entrypoint extra flags
    # @default -- Check `values.yaml`. Used by official CTFd `docker-compose.yml`
    extraFlags: "--character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --wait_timeout=28800 --log-warnings=0"
    resourcePreset: small
    persistence:
      enabled: true
      size: 2Gi
  secondary:
    # -- MariaDB primary entrypoint extra flags
    # @default -- Check `values.yaml`. Used by official CTFd `docker-compose.yml`
    extraFlags: "--character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --wait_timeout=28800 --log-warnings=0"
    resourcePreset: small  # more taiored resources are needed
    replicaCount: 1
    persistence:
      enabled: true
      size: 2Gi
  metrics:
    enabled: true  # prometheus metrics exporter

# Override the redis subchart values (I am considering the switch from redis to redis-ha)
redis:
  # -- Deploys bitnami's redis (set to false if you want to use an external cache)
  enabled: true  # set to false if you want to use an external redis
  # -- External redis cache connection details. Takes effect if `redis.enabled` is set to false
  # @default -- ignored
  external:
    port: 6379
    host: external-redis-host
    username: ""
    password: ""
  volumePermissions:
    enabled: true  # set to false if you want to manage the permissions yourself
  sysctl:
    enabled: true
  auth:
    enabled: false
  master:
    count: 1  # higher values are experimental
    resourcesPreset: micro  # more tailored resources are needed
    persistence:
      enabled: false
  replica:
    autoscaling:
      enabled: true
      targetCPU: "80"
    persistence:
      enabled: false
    resourcesPreset: micro
  metrics:
    enabled: true  # prometheus metrics exporter

# Override the seaweedfs subchart values
seaweedfs:
  # -- Deploys seaweedfs (set to false if you want to use an bucket)
  enabled: true # set to false if you want to use an external bucket
  master:
    # -- seaweedfs-master replicas
    replicas: 3
    data:
      # -- seaweedfs data storage type
      type: "persistentVolumeClaim"
      # -- seaweedfs storage size
      size: 5Gi

  volume:
    # -- seaweedfs-volume replicas
    replicas: 3
    
  filer:
    # -- seaweedfs-filer replicas
    replicas: 3
    # -- seaweedfs-filer enable PVC for data persistence
    enablePVC: true
    # -- seaweedfs-filer PVC storage size
    storage: 5Gi
    data:
      # -- seaweedfs-filer data storage type
      type: "persistentVolumeClaim"
      # -- seaweedfs-filer storage size
      size: 5Gi
    s3:
      # -- seaweedfs-s3 enable. This enables S3 API (Should be left to `true`)
      enabled: true
      # -- seaweedfs-s3 enable authentication (no need since seaweed is private to the cluster)
      enableAuth: false
      # -- seaweedfs-s3 create bucket upon deploying
      createBuckets:
        - name: ctfd-bucket
